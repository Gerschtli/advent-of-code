name: Test
on:
  - push
  - pull_request

jobs:
  go:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        directory:
          - lib/go/file
          - 2020/01
          - 2020/03
          - 2020/05
          - 2020/07
          - 2020/09
          - 2020/11
          - 2020/13
          - 2020/15
          - 2020/17
          - 2020/19

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.15.x

      - name: Use cache
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod      # Module download cache
            ~/.cache/go-build # Build cache (Linux)
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Check go fmt
        run: test -z "$(gofmt -l)"
        working-directory: ${{ matrix.directory }}

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.30
          working-directory: ${{ matrix.directory }}

      - name: Run go mod tidy
        run: |
          go mod tidy -v
          git diff --exit-code
        working-directory: ${{ matrix.directory }}

      - name: Run go test
        run: go test -v ./...
        working-directory: ${{ matrix.directory }}

  nix:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        directory:
          - 2021/01
          - 2021/03

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install nix
        uses: cachix/install-nix-action@v17

      - name: Check flake
        run: nix flake check
        working-directory: ${{ matrix.directory }}

      - name: Run app
        run: nix run
        working-directory: ${{ matrix.directory }}

  python:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        directory:
          - 2021/02
          - 2021/04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.10.0

      - name: Install pipenv
        run: pip install pipenv

      - name: Cache pipenv
        id: cache-pipenv
        uses: actions/cache@v3
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-${{ matrix.directory }}-pipenv-${{ hashFiles(format('{0}/Pipfile.lock', matrix.directory)) }}

      - name: Install dependencies
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: pipenv install --deploy --dev
        working-directory: ${{ matrix.directory }}

      - name: Run tests
        run: pipenv run test
        working-directory: ${{ matrix.directory }}

      - name: Run app
        run: pipenv run app
        working-directory: ${{ matrix.directory }}

  rust:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        directory:
          - lib/rust/error
          - lib/rust/file
          - 2020/02
          - 2020/04
          - 2020/06
          - 2020/08
          - 2020/10
          - 2020/12
          - 2020/14
          - 2020/16
          - 2020/18

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: rustfmt, clippy

      - name: Use cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check coding style
        run: cargo fmt --verbose -- --check
        working-directory: ${{ matrix.directory }}

      - name: Run cargo check
        run: cargo check --verbose
        working-directory: ${{ matrix.directory }}

      - name: Run cargo build
        run: cargo build --verbose
        working-directory: ${{ matrix.directory }}

      - name: Run cargo clippy
        run: cargo clippy --verbose
        working-directory: ${{ matrix.directory }}

      - name: Run cargo test
        run: cargo test --verbose
        working-directory: ${{ matrix.directory }}
